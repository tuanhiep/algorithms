package tuanhiep.usa.algo.euler;

import java.util.HashMap;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12_HighlyDivisibleTriangleNumber {
    public static void main(String[] args) {
        System.out.println(findTriangleNumber(500));
    }

    public static HashMap<Integer, Integer> memo = new HashMap<>();

    public static long findTriangleNumber(int n) {

        int countDivisor = 0;
        int position = 2;
        while (countDivisor <= n) {
            if (position % 2 == 0) {
                countDivisor = getNumberDivisor(position / 2) * getNumberDivisor(position + 1);

            } else {
                countDivisor = getNumberDivisor((position + 1) / 2) * getNumberDivisor(position);

            }
            position++;

        }
        return generateTriangleNumner(position - 1);
    }

    private static int getNumberDivisor(int number) {
        if (memo.containsKey(number)) {
            return memo.get(number);
        }
        int count = 0;
        for (int i = 1; i < Math.sqrt(number) + 1; i++) {
            if (number % i == 0) {
                if (i != number / i) {
                    count += 2;

                } else {
                    count++;
                }
            }
        }
        memo.put(number, count);
        return count;
    }


    private static long generateTriangleNumner(int position) {
        return (position + 1) * position / 2;

    }


}
